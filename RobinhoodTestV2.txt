import robin_stocks.robinhood as rs
import pandas as pd
import datetime
import time
import talib
from scipy.stats import linregress

def fetch_latest_price():
    price_info = rs.crypto.get_crypto_quote('ETC')
    price = float(price_info['mark_price'])
    timestamp = datetime.datetime.now()
    return timestamp, price

def calculate_indicators(data):
    data['MA'] = data['Price'].rolling(window=10).mean()
    data['RSI'] = talib.RSI(data['Price'].values, timeperiod=14)
    macd, signal, hist = talib.MACD(data['Price'].values, fastperiod=12, slowperiod=26, signalperiod=9)
    data['MACD'] = macd
    data['MACD_Signal'] = signal
    data['MACD_Hist'] = hist
    return data

def analyze_trend(data):
    # Generate an array of x values from 0 to the number of data points - 1
    x_values = range(len(data) - 30, len(data))
    # Extract the last 30 price data points
    y_values = data['Price'][-30:]
    # Calculate the linear regression parameters
    slope, intercept, r_value, p_value, std_err = linregress(x_values, y_values)
    # Return the slope as the trend indicator
    return slope

def make_knn_prediction(model, data):
    # Prepare data for KNN prediction
    latest_data = data[['MA', 'RSI', 'MACD', 'Slope']].iloc[-1].values.reshape(1, -1)
    return model.predict(latest_data)

def make_trading_decision(slope, slope_threshold, prediction, prediction_confidence, confidence_threshold, volatility, volatility_threshold, in_position):
    # Calculate trend strength
    trend_strength = abs(slope)
    
    # Check if trend is strong, prediction is confident, and account for volatility
    is_strong_trend = trend_strength > slope_threshold
    is_confident_prediction = prediction_confidence > confidence_threshold
    is_low_volatility = volatility < volatility_threshold
    
    if slope > 0 and prediction == 1 and not in_position and is_strong_trend and is_confident_prediction and is_low_volatility:
        return "Buy", True
    elif (slope <= 0 or not is_low_volatility) and prediction == 0 and in_position and is_confident_prediction:
        return "Sell", False
    else:
        return "Hold", in_position

def calculate_profit(data, buy_price, sell_price):
    profit = sell_price - buy_price
    return profit

# Main Script
username = 'nsloan91@outlook.com'
password = 'marine2010'
rs.login(username=username, password=password)

data = pd.DataFrame(columns=['Timestamp', 'Price', 'MA', 'RSI', 'MACD', 'MACD_Signal', 'MACD_Hist'])
total_duration = 20 * 60  # 20 minutes in seconds
in_position = False
buy_price = 0.0
sell_price = 0.0
action = ''
predicted_price = 0.0

# Get the current datetime
now = datetime.datetime.now()

# Format the datetime as a string in the desired format
formatted_now = now.strftime("%Y%m%d_%H%M%S")

# Create the file name by appending the formatted datetime to "Results_"
file_name = f"Results_{formatted_now}.csv"

#Directory
directory = "D:/Nick/Source/Results"

# Check if the directory exists, and create it if it doesn't
if not os.path.exists(directory):
    os.makedirs(directory)

# Append the directory to the file name
full_path = os.path.join(directory, file_name)

try:
    start_time = time.time()
    while True:
        current_time = time.time()
        elapsed_time = current_time - start_time
        remaining_time = total_duration - elapsed_time

        if remaining_time <= 0:
            break

        timestamp, price = fetch_latest_price()
        new_row = pd.DataFrame({'Timestamp': [timestamp], 'Price': [price]})
        data = pd.concat([data, new_row], ignore_index=True)

        if len(data) >= 30:
            data = calculate_indicators(data)
            slope = analyze_trend(data)
            # Ensure knn_prediction also calculates or retrieves predicted_price
            knn_prediction, predicted_price = make_knn_prediction(knn_model, data)  # Adjusted for clarity
            # Assuming action determination logic is correctly handled elsewhere
            action, in_position = make_trading_decision(slope, knn_prediction, in_position)
            data.loc[data.index[-1], 'Action Taken'] = action  # Corrected use of index
            data.loc[data.index[-1], 'Predicted_Price'] = predicted_price  # Correct placement

        if action == 'Buy':
            buy_price = data.loc[data.index[-1], 'Price']
        elif action == 'Sell' and buy_price > 0:
            sell_price = data.loc[data.index[-1], 'Price']
            profit = calculate_profit(data, buy_price, sell_price)
            data.loc[data.index[-1], 'Profit'] = profit
            buy_price = 0  # Reset buy price after selling

        data.to_csv(full_path, index=False)
        time.sleep(10)

except Exception as e:
    print(f"An error occurred: {e}")

finally:
    rs.logout()
